{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAoBA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,KACjBC,YAAW,KACaC,KAAKC,SAAW,GAEpCC,EAAAT,GAASU,OAAOC,QACd,uBAAqBR,QAAiBC,OAGxCK,EAAAT,GAASU,OAAOE,QACd,sBAAoBT,QAAeC,MAAU,GAGhDA,EAAM,G,CA/BAS,SAASC,cAAc,SAC/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAEC,iBAEF,MAAQC,UAAUd,MAAEA,EAAKe,KAAEA,EAAIC,OAAEA,IAAaJ,EAAEK,cAEhD,IACE,IAAIC,EAAI,EAAGC,EAAIC,OAAOpB,EAAMqB,OAC5BH,GAAKF,EAAOK,MACZH,GAAK,EAAGC,GAAKC,OAAOL,EAAKM,OAEzBvB,EAAcoB,EAAGC,GAEnBP,EAAEU,OAAOC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  const { elements: { delay, step, amount } } = e.currentTarget;\n\n  for (\n    let i = 1, j = Number(delay.value);\n    i <= amount.value;\n    i += 1, j += Number(step.value)\n  ) {\n    createPromise(i, j);\n  }\n  e.target.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise(() => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      } else {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      }\n    }, delay);\n  });\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","setTimeout","Math","random","$parcel$interopDefault","Notify","success","failure","document","querySelector","addEventListener","e","preventDefault","elements","step","amount","currentTarget","i","j","Number","value","target","reset"],"version":3,"file":"03-promises.d2168916.js.map"}